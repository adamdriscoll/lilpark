[{"C:\\src\\lilpark\\pages\\api\\hello.ts":"1","C:\\src\\lilpark\\pages\\index.tsx":"2","C:\\src\\lilpark\\pages\\_app.tsx":"3"},{"size":320,"mtime":1658373389991,"results":"4","hashOfConfig":"5"},{"size":4312,"mtime":1658373389991,"results":"6","hashOfConfig":"5"},{"size":453,"mtime":1658373677954,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nizw9d",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\src\\lilpark\\pages\\api\\hello.ts",[],[],"C:\\src\\lilpark\\pages\\index.tsx",["18"],[],"import type { NextPage } from 'next'\r\nimport { Stage, Sprite, TilingSprite, Text } from '@inlet/react-pixi'\r\nimport React from 'react';\r\nimport * as PIXI from 'pixi.js';\r\n\r\nexport const ResourceContext = React.createContext<PIXI.utils.Dict<PIXI.LoaderResource>>({});\r\n\r\nconst Sign = () => {\r\n  return <ResourceContext.Consumer>{(context) => {\r\n    if (context?.objects?.texture) {\r\n      return (<Sprite texture={new PIXI.Texture(context.objects.texture as any, new PIXI.Rectangle(0, 0, 16, 16))} x={0} y={0} height={16} width={16} />)\r\n    }\r\n\r\n  }}</ResourceContext.Consumer>\r\n}\r\n\r\nconst Tree = ({ x = 0, y = 0 }) => {\r\n  return <ResourceContext.Consumer>{(resources) => {\r\n\r\n    var treeTextures = [\r\n      // trees\r\n      new PIXI.Texture(resources.objects.texture as any, new PIXI.Rectangle(0, 80, 48, 64)),\r\n      new PIXI.Texture(resources.objects.texture as any, new PIXI.Rectangle(0, 144, 48, 64)),\r\n      new PIXI.Texture(resources.objects.texture as any, new PIXI.Rectangle(48, 80, 48, 64)),\r\n      new PIXI.Texture(resources.objects.texture as any, new PIXI.Rectangle(48, 144, 48, 64)),\r\n    ];\r\n\r\n    const spriteIndex = Math.floor(Math.random() * treeTextures.length);\r\n    return (<Sprite texture={treeTextures[spriteIndex]} x={x} y={y} />)\r\n  }}</ResourceContext.Consumer>\r\n}\r\n\r\nconst Home: NextPage = () => {\r\n  const [resources, setResources] = React.useState<PIXI.utils.Dict<PIXI.LoaderResource>>({});\r\n  const [loading, setLoading] = React.useState(true);\r\n  const [windowHeight, setWindowHeight] = React.useState(0);\r\n  const [windowWidth, setWindowWidth] = React.useState(0);\r\n\r\n  const load = (app: PIXI.Application) => {\r\n    app.loader.add('objects', '/sprites/objects/objects.png').load(({ resources }) => {\r\n      setResources(resources);\r\n      setLoading(false);\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    setWindowHeight(window.innerHeight);\r\n    setWindowWidth(window.innerWidth);\r\n  })\r\n\r\n  // const sprites = {\r\n  //   sign: {},\r\n  //   trees: new Array<React.ReactElement>\r\n  // };\r\n  // sprites.sign = <Sprite texture={new PIXI.Texture(resources.objects.texture, new PIXI.Rectangle(0, 0, 16, 16))} />\r\n\r\n\r\n\r\n  // for (var i = 0; i < 300; i++) {\r\n  //   const spriteIndex = Math.floor(Math.random() * treeTextures.length);\r\n  //   sprites.trees.push(<Sprite texture={treeTextures[spriteIndex]} />);\r\n  // }\r\n\r\n  // var logTextures = [\r\n\r\n  //   //logs\r\n  //   new PIXI.Texture(resources.objects.texture, new PIXI.Rectangle(96, 80, 32, 16)),\r\n  //   new PIXI.Texture(resources.objects.texture, new PIXI.Rectangle(96, 96, 32, 16)),\r\n  //   new PIXI.Texture(resources.objects.texture, new PIXI.Rectangle(96, 144, 48, 32)),\r\n\r\n  //   // bush\r\n  //   new PIXI.Texture(resources.objects.texture, new PIXI.Rectangle(96, 112, 32, 32)),\r\n  //   new PIXI.Texture(resources.objects.texture, new PIXI.Rectangle(128, 96, 32, 48)),\r\n\r\n  //   // saproling\r\n  //   new PIXI.Texture(resources.objects.texture, new PIXI.Rectangle(128, 80, 16, 16)),\r\n  //   new PIXI.Texture(resources.objects.texture, new PIXI.Rectangle(144, 80, 16, 16)),\r\n\r\n  //   // stump\r\n  //   new PIXI.Texture(resources.objects.texture, new PIXI.Rectangle(160, 88, 32, 32)),\r\n  //   new PIXI.Texture(resources.objects.texture, new PIXI.Rectangle(160, 120, 32, 32)),\r\n  // ]\r\n\r\n\r\n  // for (var i = 0; i < 20; i++) {\r\n  //   const spriteIndex = Math.floor(Math.random() * logTextures.length);\r\n  //   sprites.trees.push(<Sprite texture={logTextures[spriteIndex]} />);\r\n  // }\r\n\r\n  const body = []\r\n  if (!loading) {\r\n    body.push(<Sign />)\r\n\r\n    for (var i = 0; i < 200; i++) {\r\n      const y = Math.floor(Math.random() * windowHeight);\r\n      const x = Math.floor(Math.random() * windowWidth);\r\n      body.push(<Tree x={x} y={y} />)\r\n    }\r\n\r\n    body.push(<Text text='Little Park' y={windowHeight - 50} x={50} style={{\r\n      fill: 'white',\r\n      stroke: 'black',\r\n      strokeThickness: 4,\r\n      fontSize: 32\r\n    }} />)\r\n  }\r\n\r\n  return (<Stage height={windowHeight} width={windowWidth} onMount={load} >\r\n\r\n    <TilingSprite\r\n      image={'./sprites/tilesets/grass.png'}\r\n      width={windowWidth}\r\n      height={windowHeight}\r\n      tilePosition={{ x: 100, y: 150 }}\r\n    />\r\n    <ResourceContext.Provider value={resources}>\r\n      {body}\r\n    </ResourceContext.Provider>\r\n  </Stage>)\r\n}\r\n\r\nexport default Home\r\n","C:\\src\\lilpark\\pages\\_app.tsx",[],[],{"ruleId":"19","severity":1,"message":"20","line":46,"column":3,"nodeType":"21","endLine":46,"endColumn":18,"suggestions":"22"},"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setWindowHeight'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","MemberExpression",["23"],{"desc":"24","fix":"25"},"Add dependencies array: []",{"range":"26","text":"27"},[1920,1920],", []"]